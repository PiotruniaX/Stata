library(dplyr)
library(tidyverse)
library(psych)
library(ggplot2)
library(e1071)
set.seed(2025)
# 1. Wczytaj poprawnie z separatorem “;”
dane <- read.csv("peru_student_enrollment_data_2023_trimmed.csv",sep=";")
nr <- dane %>% select(where(is.numeric))

# Parametry Pozycyjne
srednia<- sapply(nr,mean,na.rm=TRUE)

moda_fun <- function(x) {
  u <- unique(x)
  tab <- tabulate(match(x, u))
  u[tab == max(tab)]
}
moda <- sapply(nr, moda_fun)

mediana <- sapply(nr, median)

Q1 <- sapply(nr, quantile, probs = 0.25, na.rm = TRUE)
Q3 <- sapply(nr, quantile, probs = 0.75, na.rm = TRUE)

IQR <- Q3-Q1
Q <- (Q3-Q1)/2

T_obsz_zm_poz_min <- mediana-Q
T_obsz_zm_poz_max <- mediana+Q
poz_wsp_zmn_Q <- Q/mediana
poz_wsp_zmn_Q1Q3 <- (Q3-Q1)/(Q3+Q1)

poz_wsk_asymetrii <- (Q3-mediana)-(mediana-Q1)

poz_wsp_asymetrii <- ((Q3-mediana)-(mediana-Q1))/(2*Q)


wsk_asymetrii <- srednia-moda

min <- sapply(nr, min, na.rm = TRUE)
max <- sapply(nr, max, na.rm = TRUE)

# parametry Liczbowe
war <- sapply(nr, var, na.rm = TRUE)  

odch_std <- sqrt(war)   

odch_przec <- sapply(nr, function(x) mean(abs(x - mean(x, na.rm=TRUE)), na.rm=TRUE))  

wsp_zmiennosci <- odch_std / srednia   

wskaźnik_nierówn <- odch_przec / srednia

T_obsz_zm_sigma_min <- srednia+odch_std
T_obsz_zm_sigma_max <-srednia+odch_std
T_obsz_zm_d_min <- srednia+odch_przec
T_obsz_zm_d_max <-srednia+odch_przec

wsp_asymetrii <- sapply(nr,skewness,na.rm = TRUE)

wsp_koncentracji <- sapply(nr, kurtosis, na.rm = TRUE)

parametry <- rbind(
  Średnia=srednia,
  Mediana=mediana,
  Q1=Q1,
  Q3=Q3,
  IQR=IQR,
  Q=Q,
  Poz_wspolczynnik_zmQ=poz_wsp_zmn_Q,
  Poz_wspolczynnik_zmQ1Q3=poz_wsp_zmn_Q1Q3,
  T_obsz_zm_poz_min=T_obsz_zm_poz_min,
  T_obsz_zm_poz_max=T_obsz_zm_poz_max,
  Poz_wsk_asymetrii=poz_wsk_asymetrii,
  Poz_wsp_asymetrii=poz_wsp_asymetrii,
  Min=min,
  Max=max,
  Wariancja=war, 
  Odchylenie_std=odch_std,     
  ochOdchylenie_przec=odch_przec,
  Wspolczynnik_zmn=wsp_zmiennosci,   
  Wskaznik_nierow=wskaźnik_nierówn, 
  Obszar_zmn_sigma_min=T_obsz_zm_sigma_min, 
  Obszar_zmn_sigma_max=T_obsz_zm_sigma_max,
  Obszar_zmn_d_min=T_obsz_zm_d_min ,
  Obszar_zmn_d_max=T_obsz_zm_d_max ,
  Wspolczynnik_asym=wsp_asymetrii,
  Wspolczynnik_koncen=wsp_koncentracji
)


print(parametry)

# TESTOWANIE HIPOTEZ
# SREDNIA
dane <- read.csv("peru_student_enrollment_data_2023_trimmed.csv",sep=";")
nr <- dane %>% select(where(is.numeric))
# Srednia
s <- nr$NUMBER.OF.ENROLLED.COURSES[50:70]
n <- 20
x <- sample(s, n)


sh_s<-shapiro.test(x)
print(sh_s)
p_value <- sh_s$p.value
cat("p-value =", round(p_value, 10), "\n")

if (p_value > 0.050) {
  cat("Na poziomie istotności 0.05 nie odrzucamy normalności.\n")
} else {
  cat("Na poziomie istotności 0.05 odrzucamy normalność.\n")
}
t.test(s,mu=1)

# Przedziały ufności
# Mediana
library(boot)
m<-nr$NUMBER.OF.ENROLLED.COURSES[50:69]
m_x<-sample(m,20)
med_fun <- function(m_x, i) {median(m_x[i])}

b<-boot (data = m_x, statistic = med_fun, R = 1000)

boot.ci(b,type ="perc")


# Test mediany
m<-nr$NUMBER.OF.ENROLLED.COURSES[1000:1199]
m_x<-sample(m,100)

sh_m<-shapiro.test(m_x)
print(sh_m)

p_value_m <- sh_m$p.value
cat("p-value =", round(p_value_m, 10), "\n")

if (p_value_m > 0.05) {
  cat("Na poziomie istotności 0.05 nie odrzucamy normalności.\n")
} else {
  cat("Na poziomie istotności 0.05 odrzucamy normalność.\n")
}
wilcox.test(m_x)


#WARIANCJA

library(EnvStats)
w <- nr$NUMBER.OF.ENROLLED.COURSES[50:70]
var <- sample(w,21)

sh_v<-shapiro.test(var)
print(sh_v)

p_value_v <- sh_v$p.value
cat("p-value =", round(p_value_v, 10), "\n")

if (p_value_v > 0.05) {
  cat("Na poziomie istotności 0.05 nie odrzucamy normalności.\n")
} else {
  cat("Na poziomie istotności 0.05 odrzucamy normalność.\n")
}
sigma0_sq <- 0.5
res_var  <- varTest(var, sigma.squared = sigma0_sq, conf.level = 0.95)
print(res_var)


# FRAKCJE
dane <- read.csv("peru_student_enrollment_data_2023_trimmed.csv",sep=";")
gender <- dane$GENDER[1:150]
tablicaFrakcji <- function(x) {
  tab <- table(x)       
  prop <- prop.table(tab)         
  data.frame(
    Gender    = names(tab),        
    n        = as.integer(tab),   
    frakcja  = as.numeric(prop) 
  )
}

frakcje_gender <- tablicaFrakcji(gender)

print(frakcje_gender)

k <- sum(gender == "M")   
n_g <- length(gender) 
pt <- prop.test(k, n_g, conf.level = 0.95, correct = FALSE)
print(pt)

#WYKRESY
# 1
library(tidyverse)
data_csv <- read.csv("peru_student_enrollment_data_2023_trimmed.csv",sep=";")
subset_data <- data_csv[1:140, ]
subset_data$GENDER <- factor(
  subset_data$GENDER,
  levels = c("F", "M"),
  labels = c("Kobieta", "Mężczyzna")
)
w1 <-
  ggplot(subset_data, aes(x = GENDER)) +
  geom_bar(fill = "steelblue") +
  labs(title = "Liczba studentów według płci",
       x = "Płeć",
       y = "Liczba studentów") +
  theme_minimal()
plot(w1)
rm(list = ls())
# 2
library(tidyverse)
library(ggplot2)
data_csv <- read.csv("peru_student_enrollment_data_2023_trimmed.csv",sep=";")
subset_data <- data_csv[500:629, ]
w2 <- 
  ggplot(subset_data, aes(x = STUDY.MODE)) +
  geom_bar(fill = "steelblue") +
  labs(
    title = "Liczba studentów według trybu studiów",
    x     = "Tryb studiów",
    y     = "Liczba studentów"
  ) +
  theme_minimal()
plot(w2)

#3
library(tidyverse)
library(ggplot2)
data_csv <- read.csv("peru_student_enrollment_data_2023_trimmed.csv", sep = ";")
df100 <- data_csv[200:300,]
df100$STUDY.MODE <- factor(
  df100$STUDY.MODE,
  levels = c("Presencial","Remoto","Virtual"),
  labels = c("Stacjonarny","Zdalny","Wirtualny")
)
df2023 <- df100 %>%
  filter(!is.na(STUDY.MODE), STUDY.MODE != "") %>%
  mutate(
    paid_2023 = as.integer(TUITION.PAYMENT.MARCH.2023),
    Payment_Status = ifelse(paid_2023 == 1, "Płacący", "Niepłacący")
  ) %>%
  group_by(STUDY.MODE, Payment_Status) %>%
  summarise(Count = n(), .groups = "drop")
ggplot(df2023, aes(x = STUDY.MODE, y = Count, fill = Payment_Status)) +
  geom_col(position = position_dodge(width = 0.7), width = 0.6) +
  labs(
    title = "Status płatności czesnego w marcu 2023 wg trybu studiów",
    x = "Tryb studiów",
    y = "Liczba studentów",
    fill = "Status"
  )

# 4
library(tidyverse)
library(ggplot2)
data_csv <- read.csv("peru_student_enrollment_data_2023_trimmed.csv",sep=";")
subset_data <- data_csv[500:600, ]
ggplot(subset_data, aes(x = NUMBER.OF.ENROLLED.COURSES)) +
  geom_histogram(binwidth = 1, color = "white", fill = "steelblue") +
  labs(
    title = "Histogram liczby zapisanych kursów",
    x = "Liczba zapisanych kursów",
    y = "Liczba studentów"
  ) 


# REGRESJA
library(tidyverse)
library(broom)
library(ggplot2)

data <- read.csv("peru_student_enrollment_data_2023_trimmed.csv", sep = ";")

# 2. Sprawdzenie zmiennych
# Zmienna niezależna: TUITION PAYMENT MARCH 2022 (0/1)
summary(data$TUITION.PAYMENT.MARCH.2022)
# Zmienna zależna: NUMBER OF ENROLLED COURSES
summary(data$NUMBER.OF.ENROLLED.COURSES)

# 3. Dopasowanie modelu liniowego
model <- lm(NUMBER.OF.ENROLLED.COURSES ~ TUITION.PAYMENT.MARCH.2022,
            data = data)

# 4. Podsumowanie (w stylu borrow)
tidy(model)
glance(model)

# 5. Interpretacja współczynników
# Intercept (⎯x=0): średnio ok. 1.54 kursu, gdy opłata = 0
# Slope (β1≈0.22): studenci, którzy zapłacili, zapisują się średnio na 0.22 kursu więcej.

# 6. Wykres regresji
ggplot(data, aes(x = TUITION.PAYMENT.MARCH.2022,
                 y = NUMBER.OF.ENROLLED.COURSES)) +
  geom_jitter(width = 0.1, height = 0, alpha = 0.3) +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  scale_x_continuous(breaks = c(0,1), labels = c("nie zapłacił","zapłacił")) +
  theme_bw() +
  labs(
    x = "Opłata za marzec 2022",
    y = "Liczba zapisanych kursów",
    title = "Regresja liniowa: Liczba kursów ~ Opłata za czesne"
  )
